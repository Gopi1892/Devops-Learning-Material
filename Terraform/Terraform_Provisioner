# Provider Configuration for first region (us-east-1)
provider "aws" {
  alias  = "us-east-1"
  region = "us-east-1"  # First AWS Region (N. Virginia)
}

# Provider Configuration for second region (us-east-2)
provider "aws" {
  alias  = "us-east-2"
  region = "us-east-2"  # Second AWS Region (Ohio)
}

# Key Pair for both regions (change the path to your public key)
resource "aws_key_pair" "my_key_us_east_1" {
  provider   = aws.us-east-1
  key_name   = "my-key-pair-us-east-1"
  public_key = file("~/.ssh/id_rsa.pub")
}

resource "aws_key_pair" "my_key_us_east_2" {
  provider   = aws.us-east-2
  key_name   = "my-key-pair-us-east-2"
  public_key = file("~/.ssh/id_rsa.pub")
}

# VPC in us-east-1
resource "aws_vpc" "vpc_us_east_1" {
  provider   = aws.us-east-1
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "us-east-1-vpc"
  }
}

# VPC in us-east-2
resource "aws_vpc" "vpc_us_east_2" {
  provider   = aws.us-east-2
  cidr_block = "10.1.0.0/16"
  tags = {
    Name = "us-east-2-vpc"
  }
}

# Subnet in us-east-1
resource "aws_subnet" "subnet_us_east_1" {
  provider            = aws.us-east-1
  vpc_id              = aws_vpc.vpc_us_east_1.id
  cidr_block          = "10.0.1.0/24"
  availability_zone   = "us-east-1a"
  map_public_ip_on_launch = true
  tags = {
    Name = "us-east-1-subnet"
  }
}

# Subnet in us-east-2
resource "aws_subnet" "subnet_us_east_2" {
  provider            = aws.us-east-2
  vpc_id              = aws_vpc.vpc_us_east_2.id
  cidr_block          = "10.1.1.0/24"
  availability_zone   = "us-east-2a"
  map_public_ip_on_launch = true
  tags = {
    Name = "us-east-2-subnet"
  }
}

# Internet Gateway for us-east-1
resource "aws_internet_gateway" "igw_us_east_1" {
  provider = aws.us-east-1
  vpc_id   = aws_vpc.vpc_us_east_1.id
  tags = {
    Name = "us-east-1-igw"
  }
}

# Internet Gateway for us-east-2
resource "aws_internet_gateway" "igw_us_east_2" {
  provider = aws.us-east-2
  vpc_id   = aws_vpc.vpc_us_east_2.id
  tags = {
    Name = "us-east-2-igw"
  }
}

# Route table and route for us-east-1
resource "aws_route_table" "route_table_us_east_1" {
  provider = aws.us-east-1
  vpc_id   = aws_vpc.vpc_us_east_1.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw_us_east_1.id
  }
}

resource "aws_route_table_association" "rt_assoc_us_east_1" {
  provider      = aws.us-east-1
  subnet_id     = aws_subnet.subnet_us_east_1.id
  route_table_id = aws_route_table.route_table_us_east_1.id
}

# Route table and route for us-east-2
resource "aws_route_table" "route_table_us_east_2" {
  provider = aws.us-east-2
  vpc_id   = aws_vpc.vpc_us_east_2.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw_us_east_2.id
  }
}

resource "aws_route_table_association" "rt_assoc_us_east_2" {
  provider      = aws.us-east-2
  subnet_id     = aws_subnet.subnet_us_east_2.id
  route_table_id = aws_route_table.route_table_us_east_2.id
}

# VPC Security Group for EC2 in us-east-1 (N. Virginia)
resource "aws_security_group" "sg_us_east_1" {
  provider = aws.us-east-1
  vpc_id   = aws_vpc.vpc_us_east_1.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # SSH from anywhere
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # HTTP from anywhere
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]  # Allow all outbound traffic
  }

  tags = {
    Name = "us-east-1-sg"
  }
}

# VPC Security Group for EC2 in us-east-2 (Ohio)
resource "aws_security_group" "sg_us_east_2" {
  provider = aws.us-east-2
  vpc_id   = aws_vpc.vpc_us_east_2.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # SSH from anywhere
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # HTTP from anywhere
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]  # Allow all outbound traffic
  }

  tags = {
    Name = "us-east-2-sg"
  }
}

# EC2 Instance in us-east-1 (N. Virginia)
resource "aws_instance" "ec2_us_east_1" {
  provider          = aws.us-east-1
  ami               = "ami-0ebfd941bbafe70c6"  # Updated AMI
  instance_type     = "t2.micro"
  key_name          = aws_key_pair.my_key_us_east_1.key_name
  subnet_id         = aws_subnet.subnet_us_east_1.id
  vpc_security_group_ids = [aws_security_group.sg_us_east_1.id]
  associate_public_ip_address = true

  tags = {
    Name = "EC2-us-east-1"
  }

  # Provisioner to install NGINX
  provisioner "remote-exec" {
    connection {
      type        = "ssh"
      user        = "ec2-user"
      private_key = file("~/.ssh/id_rsa")
      host        = self.public_ip
    }

    inline = [
      "sudo yum update -y",
      "sudo yum install -y nginx",
      "sudo systemctl start nginx",
      "sudo systemctl enable nginx"
    ]
  }
}

# EC2 Instance in us-east-2 (Ohio)
resource "aws_instance" "ec2_us_east_2" {
  provider          = aws.us-east-1
  ami               = "ami-0ebfd941bbafe70c6"  # Updated AMI
  instance_type     = "t2.micro"
  key_name          = aws_key_pair.my_key_us_east_1.key_name
  subnet_id         = aws_subnet.subnet_us_east_1.id
  vpc_security_group_ids = [aws_security_group.sg_us_east_1.id]
  associate_public_ip_address = true

  tags = {
    Name = "EC2-us-east-1"
  }

  # Provisioner to install NGINX
  provisioner "remote-exec" {
    connection {
      type        = "ssh"
      user        = "ec2-user"
      private_key = file("~/.ssh/id_rsa")
      host        = self.public_ip
    }

    inline = [
      "sudo yum update -y",
      "sudo yum install -y nginx",
      "sudo systemctl start nginx",
      "sudo systemctl enable nginx"
    ]
  }
}
