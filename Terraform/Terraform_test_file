# Provider Configuration
provider "aws" {
  region = "us-east-1"  # Replace with your desired AWS region
}

# Create a key pair (this can be optional if you want to manually provide one)
resource "aws_key_pair" "my_key" {
  key_name   = "my-key-pair"
  public_key = file("~/.ssh/id_rsa.pub")  # Path to your public key file
}

# Security Group for EC2 instance
resource "aws_security_group" "instance_sg" {
  name        = "terraform-ec2-sg"
  description = "Allow SSH and HTTP access"
  
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Allow SSH from anywhere, restrict in production
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Allow HTTP access from anywhere
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]  # Allow all outbound traffic
  }
}

# EC2 Instance Configuration
resource "aws_instance" "my_ec2" {
  ami             = "ami-0ebfd941bbafe70c6"  # Replace with the AMI ID of your choice
  instance_type   = "t2.micro"              # Instance type
  key_name        = aws_key_pair.my_key.key_name
  security_groups = [aws_security_group.instance_sg.name]

  tags = {
    Name = "MyTerraformInstance"
  }
}

# Output the public IP of the instance
output "instance_public_ip" {
  value = aws_instance.my_ec2.public_ip
}





#####################################
Incase of authentication issues with aws.

Change the providers.tf to

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }
  }
}

provider "aws" {
  region     = "AWS_REGION"
  access_key = "AWS_ACCESS_KEY"
  secret_key = "AWS_SECRET_KEY"
}
