Multistage docker build for http server

multistage Docker build is a powerful technique to create lightweight and efficient Docker images by separating the build environment from the runtime environment. Below is an example of a multistage Docker build for a simple HTTP server using Node.js.

1) Create a simple HTTP server in Node.js:
Create a file named server.js with the following content:



const http = require('http');

const hostname = '0.0.0.0';
const port = 3000;

const server = http.createServer((req, res) => {
  res.statusCode = 200;
  res.setHeader('Content-Type', 'text/plain');
  res.end('Hello World\n');
});

server.listen(port, hostname, () => {
  console.log(`Server running at http://${hostname}:${port}/`);
});


2) Create a package.json file for dependencies:
Create a file named package.json with the following content:

{
  "name": "http-server",
  "version": "1.0.0",
  "description": "A simple HTTP server",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.17.1"
  }
}


3) Create a multistage Dockerfile:
Create a file named Dockerfile with the following content:

# Stage 1: Build Stage
FROM node:14 AS builder

# Set working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application code
COPY . .

# Stage 2: Production Stage
FROM node:14-slim

# Set working directory
WORKDIR /app

# Copy only the necessary files from the build stage
COPY --from=builder /app .

# Expose the port the app runs on
EXPOSE 3000

# Command to run the application
CMD ["npm", "start"]


4) Build and run the Docker image:
Open a terminal in the directory where your Dockerfile, server.js, and package.json are located and run the following commands:

# Build the Docker image
docker build -t http-server .

# Run the Docker container
docker run -p 3000:3000 http-server

5)Test the HTTP server:
Open a web browser or use curl to test the HTTP server running on http://localhost:3000:

Test the HTTP server:
Open a web browser or use curl to test the HTTP server running on http://localhost:3000:

curl http://localhost:3000


This Dockerfile uses two stages:

Builder Stage: This stage installs all the dependencies and builds the application.
Production Stage: This stage creates a lightweight image by copying only the necessary files from the builder stage. The base image used in this stage (node:14-slim) is smaller and more efficient for running the application.
This approach minimizes the final image size and ensures that only the necessary files are included in the runtime image.
